services:
    portainer:
      image: portainer/portainer-ce:lts
      container_name: portainer
      restart: always
      volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer-data:/data
      ports:
          - "10.10.10.1:8000:8000"
          - "10.10.10.1:9443:9443"

    traefik:
        image: traefik:v3.4
        container_name: traefik
        networks:
            - prod
        ports:
            - "80:80"
            - "443:443"
            - "10.10.10.1:8080:8080"
        restart: unless-stopped
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./letsencrypt:/letsencrypt
            - ./traefik:/etc/traefik

    trilium:
        image: triliumnext/notes:latest
        container_name: trilium-sync
        networks:
            - prod
        restart: unless-stopped
        volumes:
            - ${trilium_data_dir:-./trilium-data}:/home/node/trilium-data
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.trilium.rule=host(`notes.slobodausisivac.rocks`)"
            - "traefik.http.routers.trilium.tls=true"
            - "traefik.http.routers.trilium.tls.certresolver=letsencrypt"

    db:
        image: postgres:15-alpine
        networks:
            - prod
        environment:
            postgres_db: ${postgres_db}
            postgres_password: ${postgres_password}
            postgres_user: ${postgres_user}
        logging:
            driver: none
        restart: unless-stopped
        volumes:
            - db-data:/var/lib/postgresql/data

    wiki:
        image: ghcr.io/requarks/wiki:2
        container_name: wikijs
        networks:
            - prod
        depends_on:
            - db
        environment:
            db_type: postgres
            db_host: db
            db_port: 5432
            db_user: ${postgres_user}
            db_pass: ${postgres_password}
            db_name: ${postgres_db}
        restart: unless-stopped
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.wiki.rule=host(`wiki.slobodausisivac.rocks`)"
            - "traefik.http.routers.wiki.tls=true"
            - "traefik.http.routers.wiki.tls.certresolver=letsencrypt"

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        depends_on:
            - prometheus
        environment:
            - gf_security_admin_password=${gf_security_admin_password}
        ports:
            - "10.10.10.1:3000:3000"
        volumes:
            - grafana-data:/var/lib/grafana
        restart: unless-stopped
        
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        volumes:
          - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
          - prometheus-data:/prometheus
        ports:
          - "10.10.10.1:9090:9090"
        restart: unless-stopped


    node-exporter:
        image: quay.io/prometheus/node-exporter:latest
        container_name: node-exporter
        command:
            - "--path.rootfs=/host"
        pid: host
        restart: unless-stopped
        volumes:
            - "/:/host:ro,rslave"

    jenkins:
        image: jenkins/jenkins:lts
        container_name: jenkins
        networks:
            - prod
        volumes:
            - jenkins-data:/var/jenkins_home
        restart: unless-stopped
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.jenkins.rule=host(`jenkins.slobodausisivac.rocks`)"
            - "traefik.http.routers.jenkins.tls=true"
            - "traefik.http.routers.jenkins.tls.certresolver=letsencrypt"

volumes:
    db-data:
    prometheus-data:
    grafana-data:
    portainer-data:
    jenkins-data:

networks:
    prod:
        name: prod-network
        driver: bridge
